package com.example.event_reminder_bot.config;

import com.example.event_reminder_bot.bot.EventReminderBot;
import com.example.event_reminder_bot.model.entity.Event;
import com.example.event_reminder_bot.model.entity.TelegramUser;
import com.example.event_reminder_bot.service.EventService;
import com.example.event_reminder_bot.service.TelegramUserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class NotificationScheduler {

    private final EventService eventService;
    private final TelegramUserService telegramUserService;
    private final DocumentProcessor documentProcessor;
    private EventReminderBot telegramBot;

    @Lazy
    @Autowired
    public void setTelegramBot(EventReminderBot telegramBot) {
        this.telegramBot = telegramBot;
    }

    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy");
    private final SchedulerProperties schedulerProperties;


    public void sendEventNotifications() {
        log.info("‚è∞ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞...");
        documentProcessor.processDocument();


        log.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");
        notifyUsers(schedulerProperties.getDays());
        notifyUsers(0); // —Å–µ–≥–æ–¥–Ω—è
    }

    private void notifyUsers(int daysFromNow) {
        LocalDate targetDate = LocalDate.now().plusDays(daysFromNow);
        List<Event> events = eventService.getEventsForDate(targetDate);

        if (events.isEmpty()) {
            log.info("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ {}", targetDate);
            return;
        }

        StringBuilder messageBuilder = new StringBuilder();
        messageBuilder.append("üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏</b>\n\n");

        if (daysFromNow == 0) {
            messageBuilder.append("üìÖ <b>–°–µ–≥–æ–¥–Ω—è</b> —Å–æ—Å—Ç–æ–∏—Ç—Å—è:\n\n");
        } else {
            messageBuilder.append(String.format("‚è≥ –ß–µ—Ä–µ–∑ <b>%d</b> –¥–Ω—è, <b>%s</b> —Å–æ—Å—Ç–æ–∏—Ç—Å—è:\n\n",
                    daysFromNow, targetDate.format(FORMATTER)));
        }

        for (Event event : events) {
            messageBuilder.append("‚úÖ <i>")
                    .append(event.getDescription())
                    .append("</i>\n");
        }

        List<TelegramUser> users = telegramUserService.findAll();
        for (TelegramUser user : users) {
            if (user.isHasAccess()) {
                SendMessage message = SendMessage.builder()
                        .chatId(user.getTelegramId().toString())
                        .text(messageBuilder.toString())
                        .parseMode("HTML")
                        .build();
                try {
                    telegramBot.execute(message);
                } catch (Exception e) {
                    log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", user.getTelegramId(), e.getMessage());
                }
            }
        }
    }
}