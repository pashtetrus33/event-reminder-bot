package com.example.event_reminder_bot.bot;

import com.example.event_reminder_bot.config.SchedulerProperties;
import com.example.event_reminder_bot.config.TelegramBotConfig;
import com.example.event_reminder_bot.model.entity.Event;
import com.example.event_reminder_bot.model.entity.TelegramUser;
import com.example.event_reminder_bot.service.EventService;
import com.example.event_reminder_bot.service.TelegramUserService;
import com.example.event_reminder_bot.service.impl.DynamicSchedulerService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Document;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Component("telegramBot")
@RequiredArgsConstructor
@Slf4j
public class EventReminderBot extends TelegramLongPollingBot {

    private final TelegramBotConfig config;
    private final TelegramUserService userService;
    private final EventService eventService;
    private final SchedulerProperties schedulerProperties;
    private final DynamicSchedulerService schedulerService;

    @Value("${bot.access.password}")
    private String correctPassword;

    private final Map<Long, Boolean> waitingForPassword = new HashMap<>(); // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage()) return;

        Message message = update.getMessage();
        Long chatId = message.getChatId();
        String text = message.getText() != null ? message.getText().trim() : "";

        // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        userService.findByTelegramId(chatId).ifPresentOrElse(
                user -> log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}", chatId),
                () -> {
                    TelegramUser newUser = new TelegramUser();
                    newUser.setTelegramId(chatId);
                    newUser.setFirstName(message.getFrom().getFirstName());
                    newUser.setLastName(message.getFrom().getLastName());
                    newUser.setUsername(message.getFrom().getUserName());
                    newUser.setHasAccess(false);
                    userService.registerOrUpdateUser(newUser);
                    log.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}", chatId);
                }
        );

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –ø–∞—Ä–æ–ª—å
            if (waitingForPassword.containsKey(chatId) && Boolean.TRUE.equals(waitingForPassword.get(chatId))) {
                if (text.equals(correctPassword)) {
                    sendMessage(chatId, "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!");
                    waitingForPassword.put(chatId, false);
                    Optional<TelegramUser> byTelegramId = userService.findByTelegramId(chatId);
                    if (byTelegramId.isPresent()) {
                        byTelegramId.get().setHasAccess(true);
                        userService.registerOrUpdateUser(byTelegramId.get());
                    }

                } else {
                    sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
            if (message.hasText()) {
                String[] parts = text.split("\\s+");
                String command = parts[0].toLowerCase();

                switch (command) {
                    case "/start":
                        sendMessage(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö üìÖ\nüîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.");
                        waitingForPassword.put(chatId, true);
                        Optional<TelegramUser> byTelegramId = userService.findByTelegramId(chatId);
                        if (byTelegramId.isPresent()) {
                            byTelegramId.get().setHasAccess(false);
                            userService.registerOrUpdateUser(byTelegramId.get());
                        }
                        break;

                    case "/help":
                        sendHelpMessage(chatId);
                        break;

                    case "/all":
                        if (!isUserAuthorized(chatId)) {
                            sendMessage(chatId, "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.");
                            return;
                        }
                        showAllEvents(chatId);
                        break;

                    case "/current_days":
                        if (!isUserAuthorized(chatId)) {
                            sendMessage(chatId, "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.");
                            return;
                        }
                        showCurrentDays(chatId);
                        break;

                    case "/current_time":
                        if (!isUserAuthorized(chatId)) {
                            sendMessage(chatId, "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.");
                            return;
                        }
                        showCurrentNotificationTime(chatId);
                        break;

                    case "/days":
                        if (!isUserAuthorized(chatId)) {
                            sendMessage(chatId, "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.");
                            return;
                        }
                        if (parts.length > 1) {
                            try {
                                int days = Integer.parseInt(parts[1]);
                                setNotificationDays(chatId, days);
                            } catch (NumberFormatException e) {
                                sendMessage(chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: /days 3");
                            }
                        } else {
                            sendMessage(chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: /days 3");
                        }
                        break;

                    case "/time": {
                        if (!isUserAuthorized(chatId)) {
                            sendMessage(chatId, "üîí –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç");
                            return;
                        }

                        if (parts.length == 3) {
                            try {
                                int hour = Integer.parseInt(parts[1]);
                                int minute = Integer.parseInt(parts[2]);

                                if (hour < 0 || hour > 23 || minute < 0 || minute > 59) {
                                    sendMessage(chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —á–∞—Å—ã 0-23 –∏ –º–∏–Ω—É—Ç—ã 0-59");
                                    return;
                                }

                                String cron = String.format("0 %d %d * * *", minute, hour);
                                schedulerService.scheduleTask(cron);

                                sendMessage(chatId, "‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: " + String.format("%02d:%02d", hour, minute));
                            } catch (NumberFormatException e) {
                                sendMessage(chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /time 10 30");
                            }
                        } else {
                            sendMessage(chatId, "üìå –§–æ—Ä–º–∞—Ç: /time <—á–∞—Å—ã> <–º–∏–Ω—É—Ç—ã>");
                        }
                    }
                    break;


                    default:
                        sendMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.");
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if (message.hasDocument()) {
                if (!isUserAuthorized(chatId)) {
                    sendMessage(chatId, "üîí –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.");
                    return;
                }
                handleDocument(message.getDocument(), chatId);
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç chatId: {}", chatId, e);
            sendMessage(chatId, "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.");
        }
    }


    private boolean isUserAuthorized(Long chatId) {
        return !waitingForPassword.containsKey(chatId) || !waitingForPassword.get(chatId);
    }

    private void showCurrentDays(Long chatId) {
        int days = schedulerProperties.getDays();
        sendMessage(chatId, "–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∑–∞ " + days + " –¥–Ω—è(–µ–π)");
    }

    private void showCurrentNotificationTime(Long chatId) {
        String cron = schedulerService.getCurrentCron();
        String[] parts = cron.split(" ");

        if (parts.length >= 3) {
            try {
                int minute = Integer.parseInt(parts[1]);
                int hour = Integer.parseInt(parts[2]);
                sendMessage(chatId, "‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ " + String.format("%02d:%02d", hour, minute));
            } catch (NumberFormatException e) {
                sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ cron-–≤—ã—Ä–∞–∂–µ–Ω–∏—è.");
            }
        } else {
            sendMessage(chatId, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cron-–≤—ã—Ä–∞–∂–µ–Ω–∏—è.");
        }
    }


    private void setNotificationDays(Long chatId, int days) {
        if (days > 0 && days <= 60) {
            schedulerProperties.setDays(days);
            sendMessage(chatId, "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞ " + days + " " + pluralizeDays(days) + " –¥–æ —Å–æ–±—ã—Ç–∏—è. –ò –≤ –¥–µ–Ω—å —Å–æ–±—ã—Ç–∏—è.");
        } else {
            sendMessage(chatId, "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –º–µ–Ω—å—à–µ 60");
        }
    }

    private String pluralizeDays(int days) {
        if (days % 10 == 1 && days % 100 != 11) {
            return "–¥–µ–Ω—å";
        } else if (days % 10 >= 2 && days % 10 <= 4 && (days % 100 < 10 || days % 100 >= 20)) {
            return "–¥–Ω—è";
        } else {
            return "–¥–Ω–µ–π";
        }
    }


    private void showAllEvents(Long chatId) {
        List<Event> events = eventService.getAllEventsFromDate(LocalDate.now());

        if (events.isEmpty()) {
            sendMessage(chatId, "üéâ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–∑–∂–µ.");
            return;
        }

        StringBuilder response = new StringBuilder("üìÖ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n\n");
        for (Event event : events) {
            response.append("üîπ ")
                    .append(event.getEventDate())
                    .append(" ‚Äî ")
                    .append(event.getDescription())
                    .append("\n");
        }

        sendMessage(chatId, response.toString());
    }


    private void processUserAccess(TelegramUser user, Message message, Long chatId) {
        if (user.isHasAccess()) {
            sendMessage(chatId, user.getFirstName() + " –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.");
            return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
        }

        try {
            String text = message.getText();
            if (correctPassword.equals(text)) {
                user.setHasAccess(true);
                userService.registerOrUpdateUser(user);
                sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç, " + user.getFirstName() +
                                    "! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.");
            } else {
                sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", chatId, e);
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è.");
        }
    }

    private void handleNewUser(Long chatId, User telegramUser) {
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        TelegramUser user = TelegramUser.builder()
                .telegramId(telegramUser.getId())
                .username(telegramUser.getUserName())
                .firstName(telegramUser.getFirstName())
                .lastName(telegramUser.getLastName())
                .isBot(telegramUser.getIsBot())
                .languageCode(telegramUser.getLanguageCode())
                .build();

        userService.registerOrUpdateUser(user);
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:");
    }

    public void handleDocument(Document document, Long chatId) {
        if (!document.getFileName().endsWith(".xlsx")) {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx.");
            return;
        }

        try {
            org.telegram.telegrambots.meta.api.objects.File file = execute(new GetFile(document.getFileId()));
            String fileUrl = "https://api.telegram.org/file/bot" + config.getBotToken() + "/" + file.getFilePath();

            try (InputStream inputStream = new URL(fileUrl).openStream();
                 ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
                inputStream.transferTo(baos);
                byte[] excelBytes = baos.toByteArray();

                eventService.importEventsFromExcel(excelBytes);

                sendMessage(chatId, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã.");
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {}", e.getMessage(), e);
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.");
        }
    }

    public void handleDocument(InputStream inputStream, String fileName, Long chatId) {
        if (!fileName.endsWith(".xlsx")) {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx.");
            return;
        }

        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            inputStream.transferTo(baos);
            byte[] excelBytes = baos.toByteArray();

            eventService.importEventsFromExcel(excelBytes);

            sendMessage(chatId, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã.");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {}", e.getMessage(), e);
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.");
        }
    }


    public void sendMessage(Long chatId, String text) {
        SendMessage message = SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .build();
        try {
            execute(message);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }

    @Override
    public String getBotUsername() {
        return config.getBotUsername();
    }

    @Override
    public String getBotToken() {
        return config.getBotToken();
    }

    private void sendHelpMessage(Long chatId) {
        String helpText = """
                üÜò *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
                
                üëâ /start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üîê
                üëâ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ùì
                üëâ /all ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π üìã
                üëâ /days <—á–∏—Å–ª–æ> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å üóìÔ∏è (–Ω–∞–ø—Ä–∏–º–µ—Ä: /days 3)
                üëâ /current_days ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–Ω–µ–π üìÜ
                üëâ /current_time ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π ‚è∞
                üëâ /time <—á–∞—Å—ã> <–º–∏–Ω—É—Ç—ã> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: /time 9 30) ‚è≤Ô∏è
                
                üìé *–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å Excel —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.*
                """;

        sendMessage(chatId, helpText);
    }
}